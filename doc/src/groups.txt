/*
Supplemental details and explanations related to groups (modules).
*/


/*! \addtogroup doxy_group__buffer

\details
[`uv_buf_t`]: http://docs.libuv.org/en/latest/misc.html#c.uv_buf_t "libuv"
[`iovec`]: http://man7.org/linux/man-pages/man2/readv.2.html "readv(2)"
[`WSABUF`]: https://msdn.microsoft.com/en-us/library/ms741542(v=vs.85).aspx "MSDN"

libuv uses the [`uv_buf_t`] structure to describe the I/O buffer. It is made up in accordance with
system depended type [`iovec`] on Unix-like OSes and with [`WSABUF`] on Windows. An array of
`uv_buf_t` structures is used to allow writing multiple buffers in a single `uv::write` request.

The class `uv::buffer` encapsulates `uv_buf_t` structure and provides `uv_buf_t[]` array functionality.
\see documentation for `uv::buffer::buffer()` constructors.

For the following example here is the diagram illustrating the internals of the `uv::buffer` object while executing `foo(BUF)`:
```
buffer BUF{100, 200, 0, 300};

void foo(buffer _b)  { /*...*/ }

int main() {
  foo(BUF);
}
```
\verbatim

         BUF                         buffer::instance
 ╔═══════════════╗       ╔═════════════════════════════════════╗
 ║ uv_buf_t* ptr ╫────┐  ║ ref_count refs = 2                  ║
 ╚═══════════════╝    │  ╟─────────────────────────────────────╢
                      │  ║ size_t    buf_count = 4             ║
                      │  ╟─────────────────┬───────────────────╢
         _b        ┌─►└─►║ uv_buf_t buf[0] │ char*  .base      ╫───┐
 ╔═══════════════╗ │     ║                 │ size_t .len = 100 ║   │
 ║ uv_buf_t* ptr ╫─┘     ╚═════════════════╧═══════════════════╝   │
 ╚═══════════════╝       │ uv_buf_t buf[1] │ char*  .base      ┼───│───┐
                         │                 │ size_t .len = 200 │   │   │
                         ├─────────────────┼───────────────────┤   │   │
                         │ uv_buf_t buf[2] │ char*  .base      ┼───│───│───┐
                         │                 │ size_t .len = 0   │   │   │   │
                         ├─────────────────┼───────────────────┤   │   │   │
                         │ uv_buf_t buf[3] │ char*  .base      ┼───│───│───│───┐
                         │                 │ size_t .len = 300 │   │   │   │   │
                         ├─────────────────┴───────────────────┤   │   │   │   │
                         │ ... std::max_align_t padding ...    │   │   │   │   │
                         ├─────────────────────────────────────┤   │   │   │   │
                         │                                     │◄──┘   │   │   │
                         │ ... 100 bytes ...                   │       │   │   │
                         │                                     │       │   │   │
                         ├─────────────────────────────────────┤       │   │   │
                         │                                     │◄──────┘   │   │
                         │                                     │           │   │
                         │ ... 200 bytes ...                   │           │   │
                         │                                     │           │   │
                         │                                     │           │   │
                         ├─────────────────────────────────────┤           │   │
                         │                                     │◄──────────┘◄──┘
                         │                                     │
                         │                                     │
                         │ ... 300 bytes ...                   │
                         │                                     │
                         │                                     │
                         │                                     │
                         └─────────────────────────────────────┘
\endverbatim

[ ]: # "▲ ► ▼ ◄"
[ ]: # "─ │ ┌ ┐ └ ┘ ├ ┤ ┬ ┴ ┼"
[ ]: # "═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟ ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬"

The default constructor `uv::buffer::buffer()` creates a _null-initialized_ `uv_buf_t` structure.
One can manually fill in a _null-initialized_ `uv_buf_t` structure to make it pointing to manually allocated memory
area in the following ways:
```
buffer buf;

const size_t len = /*...*/

buf[0] = uv_buf_init(new char[len], len);

// or

buf.base() = new char[len];
buf.len() = len;
```

\warning Do not return such a manually initialized `buffer` objects from the buffer allocation callbacks (of
`uv::on_buffer_alloc_t` function type) that should be passed to `io::read_start()` and `udp::recv_start()` functions.
Merely a copy of the first `uv_buf_t` structure held in a `buffer` object is passed to libuv API functions and there
is no way to reconstruct the `buffer` object's address (which is needed for the uvcc reference counting mechanism to
work properly) from the `uv_buf_t.base` pointer referencing the manually allocated external memory.
\warning Also, the `buffer` objects that contain an array of `uv_buf_t` structures are not supported as a valid result
of the `uv::on_buffer_alloc_t` callback functions. Only a single `uv_buf_t` structure in a `buffer` object is currently
supported for the purposes of the `io::read_start()` and `udp::recv_start()` functions.

\sa libuv documentation: [`uv_buf_init()`](http://docs.libuv.org/en/v1.x/misc.html#c.uv_buf_init).

*/



/*! \addtogroup doxy_group__handle

\details
\note If necessary, any libuv function can be directly applied to uvcc handle objects by
using explicit `static_cast` operator that casts the handle variable to the desired libuv handle type.

*/



