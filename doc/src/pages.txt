/*
Additional custom pages.
*/


/*! \page doxy_page__introduction  Introduction

uvcc is C++ bindings for libuv.

\sa _docs.libuv.org_: [libuv documentation](http://docs.libuv.org/en/v1.x/)\n
    _nikhilm.github.io/uvbook_: [An Introduction to libuv](http://nikhilm.github.io/uvbook)
    (now it is incorporated as the [User guide](http://docs.libuv.org/en/v1.x/guide.html) part of the libuv documentation)\n
    _github.com/thlorenz/libuv-dox_: [Documenting types and methods of libuv, mostly by reading  uv.h](https://github.com/thlorenz/libuv-dox)

*/



/*! \page doxy_page__ref_counting  Objects with reference counting semantics

To implement automatic memory management for the objects involved in libuv API function calls and user callbacks
these uvcc classes are designed with the use of a reference counting technique:
- `uv::buffer`
- `uv::handle`
- `uv::request`
- `uv::loop`
.

This means that the variables for one of these types are just pointers to object instances created on the heap
and have semantics analogous to `std::shared_ptr`.
A newly created variable produces a new object got instantiated on the heap with initial reference count value equal to one.
Copying this variable to another or passing it by value as a function argument just copies the pointer and increases the reference
count of the object instance. If the variable goes out of scope of its definition and gets destroyed then the reference count of
the object instance is decreased. The count increase/decrease operations are atomic and thread-safe.
The object instance by itself gets actually destroyed and the memory allocated for it
is automatically released when the last variable referencing the object is destroyed and the reference count becomes zero.

\sa Considerations on reference-counted objects in [libcxx](http://www.libcxx.org/refobj.html) documentation on _www.libcxx.org_.

*/



/*! \page doxy_page__destroy_cb  Destroy callbacks

The following libuv types provide a field which is a pointer to the user-defined arbitrary data
that can be associated with the libuv object:
- [`uv_handle_t.data`](http://docs.libuv.org/en/v1.x/handle.html#c.uv_handle_t.data),
- [`uv_req_t.data`](http://docs.libuv.org/en/v1.x/request.html#c.uv_req_t.data),
- [`uv_loop_t.data`](http://docs.libuv.org/en/v1.x/loop.html#c.uv_loop_t.data).
.

Each of the uvcc classes representing these libuv types provides a destroy callback that is called when the reference count
for the object instance becomes zero:
- `uv::handle::on_destroy_t`
- `uv::request::on_destroy_t`
- `uv::loop::on_destroy_t`
.

The callback is intended to give the option to manipulate the user-defined data associated with the object
through the `.data` pointer before the last variable referencing this object has been destroyed.

For the `uv::handle` calss the destroy callback functionality was initially based on the underlying libuv API
[`uv_close_cb`](http://docs.libuv.org/en/v1.x/handle.html#c.uv_close_cb) facilities.
The handle close callback passed to [`uv_close()`](http://docs.libuv.org/en/v1.x/handle.html#c.uv_close)
goes through the event loop and is called asynchronously after the `uv_close()` call. But it wouldn't be executed if the loop
with which the handle to be closed is associated is not running e.g. because of the loop has exited
after processing all active handles and requests, and the program has come to the end (in this case the special care should be taken
for proper closing of the libuv loop so all the pending callbacks to be performed). Instead, uvcc's destroy callback is called
in any case when the last variable referencing this handle is destroyed. Whether the loop is running or not, the destroy callback
will be executed synchronously as integrated part of the handle instance closing procedure.

For the other two classes (`uv::request` and `uv::loop`) the destroy callbacks are a uvcc specific feature and they are executed
as integrated part of the variable's destructor.

*/



/*! \page doxy_page__examples  Examples

uvcc sources are accompanied with several illustrative example programs the source code of which can be found in the
/example subdirectory.

- \subpage doxy_page__example_lxjs2012  "lxjs2012-demo" - an example used by Bert Belder at LXJS 2012 to demonstrate the libuv basics.\n
                                        It shows how uvcc simplifies the code.

- \subpage doxy_page__example_cpio  "cpio" - a simple program that copies its `stdin` to `stdout`.\n
                                    It shows some essential points that one comes across with when beginning to develop
                                    programs using libuv and how uvcc address them.

- \subpage doxy_page__example_tee   "tee" - a program that copies its `stdin` to `stdout` and also to each file specified as a program argument.\n
                                    It demonstrates uvcc features and simple version of the buffer pool that can avoid intense memory
                                    allocation requests.
.

*/


/*! \page doxy_page__example_lxjs2012  lxjs2012-demo

The example used by Bert Belder at LXJS 2012 to introduce the libuv basics.
\sa Video at _youtube.com_: ["LXJS 2012 - Bert Belder - libuv"](http://www.youtube.com/watch?v=nGn60vDSxQ4).

The original code is slightly modified to work with recent libuv versions > 0.10.

\verbatim example/lxjs2012-demo-uv.c \endverbatim
\includelineno lxjs2012-demo-uv.c

Here is the very same program being rewritten using uvcc.
One can find that the code has become more compact and has far less
["translation noise"](https://books.google.ru/books?id=Uemuaza3fTEC&pg=PT26&dq=%22translation+noise%22&hl=en&sa=X&ved=0ahUKEwigoJ3Dq8bLAhVoc3IKHQGQCFYQ6AEIGTAA).

\verbatim example/lxjs2012-demo-uvcc.cpp \endverbatim
\includelineno lxjs2012-demo-uvcc.cpp


\sa There are another helpful introductory talks on libuv that can be found at _youtube.com_: \n
["Introduction to libuv â€“ Thorsten Lorenz"](http://www.youtube.com/watch?v=cLL28s6yb1I), \n
["using libuv and http parser to build a webserver"](http://www.youtube.com/watch?v=aLm40q7qm3w).

- - -

Here are the examples of the elementary TCP client and server programs written with uvcc.
Each program sends a greeting to the remote peer, closes its write side of the TCP connection and
keeps reading from the remote peer until it closes the connection.
\verbatim example/hello-tcp-server.cpp \endverbatim
\includelineno hello-tcp-server.cpp
\verbatim example/hello-tcp-client.cpp \endverbatim
\includelineno hello-tcp-client.cpp

*/



/*! \page doxy_page__example_cpio  cpio

A simple program that copies its `stdin` to `stdout` written in pure C using libuv.

For the sake of simplicity it is assumed that both streams can be handled with as pipes.

There are some points that should be mentioned:
- [1] The structure describing a write request should be allocated on the heap.
      \sa The rationale described on _stackoverflow.com_: ["libuv + C++ segfaults"](http://stackoverflow.com/questions/29319392/libuv-c-segfaults).
- [2] The allocated buffers should be somehow tracked in the program to be freed up to prevent
      the memory leak or to get the result of a request. The libuv suggested techniques are:
      using manual packaging/embedding the request and the buffer description structures into some sort of operational context
      enclosing structure, or using [`uv_req_t.data`](http://docs.libuv.org/en/v1.x/request.html#c.uv_req_t.data) pointer member
      to the user-defined arbitrary data.
      \sa Discussions at _github.com/joyent/libuv/issues_:\n
      \arg ["Preserve uv_write_t->bufs in uv_write() #1059"](https://github.com/joyent/libuv/issues/1059),
      \arg ["Please expose bufs in uv_fs_t's result for uv_fs_read operations. #1557"](https://github.com/joyent/libuv/issues/1557).
- [3] Be sure that things stay valid until some conditions in the future to perform asynchronous operations.
      \sa Discussion at _github.com/joyent/libuv/issues_: ["Lifetime of buffers on uv_write #344"](https://github.com/joyent/libuv/issues/344).
- [4] Be prepared to run into high memory consumption for libuv I/O queues in some cases.
      \sa Discussion on libuv mailing list at _groups.google.com/group/libuv_: ["memory issue with a simple libuv program"](https://groups.google.com/forum/#!topic/libuv/2mg16dbd2yU).

.

\verbatim example/cpio-uv.c \endverbatim
\includelineno cpio-uv.c

The following is the above program being rewritten using uvcc. All the considered points are taken into account by design of uvcc.
\verbatim example/cpio-uvcc.cpp \endverbatim
\includelineno cpio-uvcc.cpp

- - -

\anchor doxy_anchor__cpio_test
Here is a performance comparison between the two variants:
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/cpio-uv | dd of=/dev/null iflag=fullblock bs=1M count=10000
write: EPIPE (-32): broken pipe
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.5126 s, 272 MB/s
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/cpio-uv | dd of=/dev/null iflag=fullblock bs=1M count=10000
write: EPIPE (-32): broken pipe
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.4723 s, 273 MB/s

[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/cpio-uvcc | dd of=/dev/null iflag=fullblock bs=1M count=10000
write: EPIPE (-32): broken pipe
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.7677 s, 270 MB/s
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/cpio-uvcc | dd of=/dev/null iflag=fullblock bs=1M count=10000
write: EPIPE (-32): broken pipe
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.9242 s, 269 MB/s
\endverbatim
Obviously there is an impact of reference counting operations and other C++ related overheads that slightly reduce the performance.

*/



/*! \page doxy_page__example_tee  tee

A full-fledged simple program that copies its `stdin` to `stdout` and also to each file specified as a program argument.

It demonstrates the following points:

1. Different I/O endpoints and common input/output operations for them can be handled in a generic uniform manner.
The program can deal with `stdin`, `stdout` handles that can be system descriptors of any sort of supported I/O endpoints:
a file, TCP/UDP socket, pipe, or TTY. Minimal changes relative to the previous example for _cpio_ program need to be made
in source code to get a full-fledged application.

2. The very same uvcc buffer can be easily dispatched to several asynchronous operations and its lifetime
will continue until the last operation has completed.

3. An example for a simple version of the buffer pool implementation.
The pool helps avoid intense memory allocation requests. Note that it may actually decrease the performance.
The provided simple implementation is an auto-growing pool that is not thread-safe, so either only one dedicated thread might acquire an item
from the pool in multi-thread environment or such acquire requests from different threads shall not interleave with each other.
As far as this program is a typical single-thread libuv application these requirements are fulfilled.
The condition of item's `(nrefs() == 1)` indicates that no more references are left anywhere at the runtime other than in the pool
container itself and thus this spare item can be returned on an acquire request.
.

In debug build some diagnostic messages are printed out.

\sa _stackoverflow.com_: ["libuv allocated memory buffers re-use techniques"](http://stackoverflow.com/questions/28511541/libuv-allocated-memory-buffers-re-use-techniques)

\verbatim example/tee1.cpp \endverbatim
\includelineno tee1.cpp
\n

Try this program with different combinations of `stdin`/`stdout` endpoints:

`stdin`:TTY / `stdout`:TTY
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ build/example/tee1 tee-test.txt
\endverbatim
\n

`stdin`:PIPE / `stdout`:PIPE
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /etc/passwd | build/example/tee1 tee-test.txt | grep root
\endverbatim
\n

`stdin`:FILE / `stdout`:FILE
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ build/example/tee1 tee-test.txt </etc/passwd >tee-stdout.txt
\endverbatim
\n

`stdin`:FILE / `stdout`:SOCKET
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ nc -l 127.0.0.1 54321 &
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ build/example/tee1 tee-test.txt </etc/passwd >/dev/tcp/127.0.0.1/54321
\endverbatim
\n

The same \ref doxy_anchor__cpio_test "test" as with _cpio_ example program:
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/tee1 | dd of=/dev/null iflag=fullblock bs=1M count=10000
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.706 s, 271 MB/s
write to stdout (pipe) at offset 10485768192: EPIPE (-32): broken pipe
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/tee1 | dd of=/dev/null iflag=fullblock bs=1M count=10000
write to stdout (pipe) at offset 10485776384: EPIPE (-32): broken pipe
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.9361 s, 269 MB/s
\endverbatim

As it can be noted, _tee1_ program reports a different value of bytes written to `stdout` than _dd_ has read from its `stdin`.
(The same issue effectively takes place in tests for _cpio_ example programs.)
This is because _tee_'s read/write loop is able to perform several successful writes into the pipe before
having been notified the pipe is broken and the callback for a pending write operation would receive an error.

Using of a buffer pool does not increase the throughput performance in this case.
The implemented buffer pool is intended here for illustrative purposes only, its performance is linearly degrading as long as
its size is increased (by setting up `WRITE_QUEUE_SIZE_UPPER_LIMIT` to values on the order of `1000*FUFFER_SIZE`).
Another example of a buffer pool is in _example/tee2.cpp_. It uses `uv::buffer::sink_cb_t` feature.
Here is part from _tee2.cpp_ that differs from _tee1.cpp_:
\dontinclude tee2.cpp
\skipline class buffer_pool
\until alloc_cb
\n

Test results:
\verbatim
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/tee2 | dd of=/dev/null iflag=fullblock bs=1M count=10000
write to stdout (pipe) at offset 10485768192: EPIPE (-32): broken pipe
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 37.9453 s, 276 MB/s
[mike@u250 /mnt/sda3/wroot/libuv/uvcc/uvcc.git]
$ cat /dev/zero | build/example/tee2 | dd of=/dev/null iflag=fullblock bs=1M count=10000
10000+0 records in
10000+0 records out
10485760000 bytes (10 GB) copied, 38.0056 s, 276 MB/s
write to stdout (pipe) at offset 10485768192: EPIPE (-32): broken pipe
\endverbatim

*/



/*! \page doxy_page__compiling  Compiling

uvcc consists only of header files. You need just to copy files and subfolders from /src/include directory into one of
the directories being searched for header files in your project and include uvcc.hpp header into your source files.

To compile bundled examples and tests use the following make goal:
> make example/SOURCE_FILE_BASE_NAME test/SOURCE_FILE_BASE_NAME

where SOURCE_FILE_BASE_NAME is the base name (i.e. the name without extension) of one of the source files located
in /example (or /test) subdirectory.

On Windows you can use [Mingw-w64](http://mingw-w64.org) compiler, make utility, and the command shell that are packaged
with [Cygwin](https://cygwin.com) or [Msys2](http://msys2.github.io) projects.
Then add the definition for "platform=WINDOWS" environment variable as a command line argument:
> make platform=WINDOWS example/SOURCE_FILE_BASE_NAME

You will get Windows native binaries built against the libuv Windows release saved
in /libuv-x64-v1.9.1.build10 subdirectory. If you don't have libuv installed in your Windows system root folder
don't forget to copy libuv.dll from the saved libuv release subdirectory and put it along with the resulting executable files.

For debug builds add a non-empty definition for "DEBUG" environment variable as one of the command line arguments
before specifying any make target.
> make DEBUG=1 example/SOURCE_FILE_BASE_NAME

All the build results will be placed in /build/example subdirectory from the uvcc root directory.

*/



