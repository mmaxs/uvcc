# vim: ft=make
# generic makefile framework
# Copyright (c) 2017 Mikhail Usenko <michaelus@tochka.ru>


# don't try to rebuild this makefile
$(lastword $(MAKEFILE_LIST)): ;


# use common definitions
include $(ROOT)/Makefile.d/common.defs


# no default goal
# (define it with recursively expanded assignment from any empty variable)
.DEFAULT_GOAL = $@


# the object files (adjusted to build paths)
{OBJECT-FILES} = $(call !BUILD-TARGET!,$(call !OBJS!,$(CXX_FILE_SUFFIXES),$(wildcard $(SOURCES))))


# the build subdirectory being supposed for the main goal
{BUILD-DIR} = $(call !BUILD-TARGET!,$(CURDIR))


# use secondary expansion to make target-specific and automatic variables
# to be properly expanded in rule prerequisites
.SECONDEXPANSION:


# the rules to create/update an archive
$(MAKECMDGOALS): private {target-build-dir} = $(call !BUILD-DIR!,$@)
$(MAKECMDGOALS): $$({OBJECT-FILES}) | $$({target-build-dir})
	$(info $(-LINE-FEED-) *** ($@: $^))
	$(AR) $(ARFLAGS) $(call !BUILD-TARGET!,$(call !LIB-NAME!,lib%.a,$@)) $^


# create the subdirectory that should appears as a prerequisite
# of the main goal where its rules are supposed to output to
# i.e. {target-build-dir} is supposed to be the same as {BUILD-DIR}
$({BUILD-DIR})/:
	mkdir -p $@
# if it is not the case, {target-build-dir} is supposed to be under {BUILD-DIR}
$({BUILD-DIR})/%:
	mkdir -p $@


# the summary of the predefined implicit rules
# 
# AR = ar
# ARFLAGS = rv
# %.a:
# (%): %
#         $(AR) $(ARFLAGS) $@ $<
# .a:
#

